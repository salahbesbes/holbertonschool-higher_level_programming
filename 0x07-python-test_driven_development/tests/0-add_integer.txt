===============================
 How to Use doctest_in_help.py
===============================

This library is very simple, since it only has one function called
``my_function()``.

Numbers
=======

It also works with floating-point values.

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 3)
    5

----------------------------------------------

    >>> add_integer(2, -3)
    -1

The function also works with floating-point values.

----------------------------------------------

    >>> add_integer(2.0, 3.0)
    5

Note that floats are casted to ints before addition is performed.

----------------------------------------------

    >>> add_integer(2.9, 0.2)
    2

----------------------------------------------

    >>> add_integer(-2.9, -0.2)
    -2

Floating and non-floating point values can be combined.

----------------------------------------------

    >>> add_integer(2.3, -3)
    -1

The second argument is optional - by default, it is 98.

----------------------------------------------

    >>> add_integer(2)
    100

    >>> add_integer(2.0, 3)
    5

float 'NaN':
    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer
    
    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

others
======
    
boolean:
    >>> add_integer(True, 0)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    >>> add_integer(5, False)
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

string:
    >>> add_integer(5.6, "test")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

    >>> add_integer("hhhhh")
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

None:    
    >>> add_integer(None)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer
    
