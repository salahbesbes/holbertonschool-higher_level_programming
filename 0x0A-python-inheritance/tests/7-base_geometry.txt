Importing the function from the module:
    >>> MyList = __import__("1-my_list").MyList

Testing for module docstring:
    >>> m = __import__("1-my_list").__doc__
    >>> len(m) > 1
    True

Testing for class docstring:
    >>> c = __import__("1-my_list").MyList.__doc__
    >>> len(c) > 1
    True

Testing for method docstring:
	>>> mod = __import__("1-my_list").MyList.print_sorted.__doc__
	>>> len(mod) > 1
	True


>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

>>> bg.integer_validator("my_int", 12)

>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
...
TypeError: name must be an integer

>>> bg.integer_validator("name", True)
Traceback (most recent call last):
...
TypeError: name must be an integer

>>> bg.integer_validator("name", 15.6)
Traceback (most recent call last):
...
TypeError: name must be an integer

>>> bg.integer_validator("name", (5,6))
Traceback (most recent call last):
...
TypeError: name must be an integer

>>> bg.integer_validator("name", complex(5, 6))
Traceback (most recent call last):
...
TypeError: name must be an integer

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
...
ValueError: age must be greater than 0

>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
...
ValueError: distance must be greater than 0

>>> bg.integer_validator("integer")
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional argument: 'value'


>>> hasattr(bg, '__dict__')
True


>>> type(bg).__name__ == "BaseGeometry"
True

>>> hasattr(bg, "__class__")
True

>>> bg.area()
Traceback (most recent call last):
...
Exception: area() is not implemented

>>> bg.area(1)
Traceback (most recent call last):
...
TypeError: area() takes 1 positional argument but 2 were given
